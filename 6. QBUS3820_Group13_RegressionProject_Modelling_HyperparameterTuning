{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Larissa - modelling","provenance":[],"collapsed_sections":["egtI9mEpIMmD","hFLq9WFRJbep","B_T_odzroTXp","rAc1P4mDy66t","UxK-P1dV3Ecl","AUvd-ZlN35yR"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Setup"],"metadata":{"id":"95MCY3xftc1h"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VVRPTpGUy3Kv","executionInfo":{"status":"ok","timestamp":1653597190054,"user_tz":-600,"elapsed":90794,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"dd616375-7408-416f-89d4-e42cfd5a5ede"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import math\n","from datetime import datetime\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import seaborn as sns \n","from sklearn.preprocessing import MinMaxScaler\n","from scipy import stats\n","from scipy.stats import mannwhitneyu"],"metadata":{"id":"5Q_REE_GIBuR","executionInfo":{"status":"ok","timestamp":1653597190661,"user_tz":-600,"elapsed":612,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# This is to clear the warnings from the notebook, usually we should leave this on\n","import warnings\n","warnings.filterwarnings('ignore') \n","\n","# Plot settings\n","sns.set_context('notebook') # optimises figures for notebook display\n","sns.set_style('ticks') # set default plot style\n","colours = ['#4E79A7','#F28E2C','#E15759','#76B7B2','#59A14F', \n","          '#EDC949','#AF7AA1','#FF9DA7','#9C755F','#BAB0AB']\n","sns.set_palette(colours) # set custom color scheme\n","%matplotlib inline\n","plt.rcParams['figure.figsize'] = (9, 6)"],"metadata":{"id":"IzQVBpm6IKag","executionInfo":{"status":"ok","timestamp":1653597190985,"user_tz":-600,"elapsed":334,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["# PreProcessing Data"],"metadata":{"id":"egtI9mEpIMmD"}},{"cell_type":"code","source":["# Load clean data\n","data = pd.read_csv('/content/drive/MyDrive/1. Uni/QBUS3820/QBUS3820 - Group 13/airbnb_clean.csv')\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"hHj8lyswIKyB","executionInfo":{"status":"ok","timestamp":1653597192789,"user_tz":-600,"elapsed":1809,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"563317a7-969c-4212-cacf-b43ccb3c3e52"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      id                                               name  \\\n","0  11156                                  ['oasis', 'city']   \n","1  14250                      ['manly', 'harbour', 'house']   \n","2  15253  ['unique', 'designer', 'rooftop', 'apartment',...   \n","3  44545  ['sunny', 'darlinghurst', 'warehouse', 'apartm...   \n","4  58506            ['studio', 'yindi', 'mosman', 'sydney']   \n","\n","                                         description  \\\n","0  ['central', 'city', 'reached', 'easy', 'walk',...   \n","1  ['beautifully', 'renovated', 'spacious', 'quie...   \n","2  ['penthouse', 'living', 'best', 'staying', 'un...   \n","3  ['sunny', 'warehouseloft', 'apartment', 'heart...   \n","4  ['open', 'plan', 'apartment', 'opens', 'onto',...   \n","\n","                              neighbourhood_overview  host_id host_name  \\\n","0  ['close', 'everything', 'everywhere', 'many', ...    40855   Colleen   \n","1  ['balgowlah', 'heights', 'one', 'prestigious',...    55948     Heidi   \n","2  ['location', 'really', 'central', 'number', 't...    59850     Morag   \n","3  ['darlinghurst', 'home', 'sydney', 'best', 're...   112237     Atari   \n","4  ['mosman', 'smart', 'middle', 'upper', 'class'...   279955      John   \n","\n","   host_since                            host_location  \\\n","0  2009-09-23  Potts Point, New South Wales, Australia   \n","1  2009-11-20       Sydney, New South Wales, Australia   \n","2  2009-12-03       Sydney, New South Wales, Australia   \n","3  2010-04-22       Sydney, New South Wales, Australia   \n","4  2010-11-06       Sydney, New South Wales, Australia   \n","\n","                                          host_about  host_response_time  ...  \\\n","0  ['recently', 'retired', 'lived', 'worked', 'co...             missing  ...   \n","1  ['canadian', 'made', 'australia', 'home', 'ten...  within a few hours  ...   \n","2  ['originally', 'scottish', 'made', 'sydney', '...      within an hour  ...   \n","3  ['curious', 'world', 'full', 'wanderlust', 'ai...             missing  ...   \n","4  ['faber', 'est', 'suae', 'quisquae', 'fortunae...  within a few hours  ...   \n","\n","  review_communication review_location  review_value license  \\\n","0                 4.77            4.82          4.71   False   \n","1                 4.33            4.67          4.33    True   \n","2                 4.67             4.7          4.47    True   \n","3                 4.96            4.93          4.77   False   \n","4                  4.9            4.73          4.68    True   \n","\n","   instant_bookable calculated_host_listings_count  \\\n","0             False                              1   \n","1             False                              2   \n","2              True                              1   \n","3             False                              1   \n","4             False                              1   \n","\n","   calculated_host_listings_count_entire_homes  \\\n","0                                            0   \n","1                                            2   \n","2                                            0   \n","3                                            1   \n","4                                            1   \n","\n","   calculated_host_listings_count_private_rooms  \\\n","0                                             1   \n","1                                             0   \n","2                                             1   \n","3                                             0   \n","4                                             0   \n","\n","  calculated_host_listings_count_shared_rooms  reviews_per_month  \n","0                                           0               1.34  \n","1                                           0               0.04  \n","2                                           0               3.21  \n","3                                           0               0.56  \n","4                                           0               2.23  \n","\n","[5 rows x 55 columns]"],"text/html":["\n","  <div id=\"df-9cb25048-90cd-4017-acca-8342f9827b01\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>name</th>\n","      <th>description</th>\n","      <th>neighbourhood_overview</th>\n","      <th>host_id</th>\n","      <th>host_name</th>\n","      <th>host_since</th>\n","      <th>host_location</th>\n","      <th>host_about</th>\n","      <th>host_response_time</th>\n","      <th>...</th>\n","      <th>review_communication</th>\n","      <th>review_location</th>\n","      <th>review_value</th>\n","      <th>license</th>\n","      <th>instant_bookable</th>\n","      <th>calculated_host_listings_count</th>\n","      <th>calculated_host_listings_count_entire_homes</th>\n","      <th>calculated_host_listings_count_private_rooms</th>\n","      <th>calculated_host_listings_count_shared_rooms</th>\n","      <th>reviews_per_month</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>11156</td>\n","      <td>['oasis', 'city']</td>\n","      <td>['central', 'city', 'reached', 'easy', 'walk',...</td>\n","      <td>['close', 'everything', 'everywhere', 'many', ...</td>\n","      <td>40855</td>\n","      <td>Colleen</td>\n","      <td>2009-09-23</td>\n","      <td>Potts Point, New South Wales, Australia</td>\n","      <td>['recently', 'retired', 'lived', 'worked', 'co...</td>\n","      <td>missing</td>\n","      <td>...</td>\n","      <td>4.77</td>\n","      <td>4.82</td>\n","      <td>4.71</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.34</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>14250</td>\n","      <td>['manly', 'harbour', 'house']</td>\n","      <td>['beautifully', 'renovated', 'spacious', 'quie...</td>\n","      <td>['balgowlah', 'heights', 'one', 'prestigious',...</td>\n","      <td>55948</td>\n","      <td>Heidi</td>\n","      <td>2009-11-20</td>\n","      <td>Sydney, New South Wales, Australia</td>\n","      <td>['canadian', 'made', 'australia', 'home', 'ten...</td>\n","      <td>within a few hours</td>\n","      <td>...</td>\n","      <td>4.33</td>\n","      <td>4.67</td>\n","      <td>4.33</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.04</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15253</td>\n","      <td>['unique', 'designer', 'rooftop', 'apartment',...</td>\n","      <td>['penthouse', 'living', 'best', 'staying', 'un...</td>\n","      <td>['location', 'really', 'central', 'number', 't...</td>\n","      <td>59850</td>\n","      <td>Morag</td>\n","      <td>2009-12-03</td>\n","      <td>Sydney, New South Wales, Australia</td>\n","      <td>['originally', 'scottish', 'made', 'sydney', '...</td>\n","      <td>within an hour</td>\n","      <td>...</td>\n","      <td>4.67</td>\n","      <td>4.7</td>\n","      <td>4.47</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3.21</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>44545</td>\n","      <td>['sunny', 'darlinghurst', 'warehouse', 'apartm...</td>\n","      <td>['sunny', 'warehouseloft', 'apartment', 'heart...</td>\n","      <td>['darlinghurst', 'home', 'sydney', 'best', 're...</td>\n","      <td>112237</td>\n","      <td>Atari</td>\n","      <td>2010-04-22</td>\n","      <td>Sydney, New South Wales, Australia</td>\n","      <td>['curious', 'world', 'full', 'wanderlust', 'ai...</td>\n","      <td>missing</td>\n","      <td>...</td>\n","      <td>4.96</td>\n","      <td>4.93</td>\n","      <td>4.77</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.56</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>58506</td>\n","      <td>['studio', 'yindi', 'mosman', 'sydney']</td>\n","      <td>['open', 'plan', 'apartment', 'opens', 'onto',...</td>\n","      <td>['mosman', 'smart', 'middle', 'upper', 'class'...</td>\n","      <td>279955</td>\n","      <td>John</td>\n","      <td>2010-11-06</td>\n","      <td>Sydney, New South Wales, Australia</td>\n","      <td>['faber', 'est', 'suae', 'quisquae', 'fortunae...</td>\n","      <td>within a few hours</td>\n","      <td>...</td>\n","      <td>4.9</td>\n","      <td>4.73</td>\n","      <td>4.68</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2.23</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 55 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9cb25048-90cd-4017-acca-8342f9827b01')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9cb25048-90cd-4017-acca-8342f9827b01 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9cb25048-90cd-4017-acca-8342f9827b01');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AOftLBLCIdMB","executionInfo":{"status":"ok","timestamp":1653597192791,"user_tz":-600,"elapsed":30,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"3591c1a9-3ea3-4f9a-9d1a-35c9000cf60c"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 20880 entries, 0 to 20879\n","Data columns (total 55 columns):\n"," #   Column                                        Non-Null Count  Dtype  \n","---  ------                                        --------------  -----  \n"," 0   id                                            20880 non-null  int64  \n"," 1   name                                          20880 non-null  object \n"," 2   description                                   20880 non-null  object \n"," 3   neighbourhood_overview                        20880 non-null  object \n"," 4   host_id                                       20880 non-null  int64  \n"," 5   host_name                                     20877 non-null  object \n"," 6   host_since                                    20877 non-null  object \n"," 7   host_location                                 20859 non-null  object \n"," 8   host_about                                    20880 non-null  object \n"," 9   host_response_time                            20880 non-null  object \n"," 10  response_percent                              20880 non-null  object \n"," 11  acceptance_percent                            20880 non-null  object \n"," 12  host_is_superhost                             20880 non-null  bool   \n"," 13  host_neighbourhood                            20880 non-null  object \n"," 14  listings_count                                20880 non-null  int64  \n"," 15  host_verifications                            20880 non-null  object \n"," 16  host_has_profile_pic                          20880 non-null  bool   \n"," 17  host_is_verified                              20880 non-null  bool   \n"," 18  neighbourhood                                 20880 non-null  object \n"," 19  latitude                                      20880 non-null  float64\n"," 20  longitude                                     20880 non-null  float64\n"," 21  property_type                                 20880 non-null  object \n"," 22  room_type                                     20880 non-null  object \n"," 23  accommodates                                  20880 non-null  int64  \n"," 24  bathrooms_text                                20856 non-null  object \n"," 25  bedrooms                                      20880 non-null  int64  \n"," 26  beds                                          20880 non-null  float64\n"," 27  amenities                                     20880 non-null  object \n"," 28  price                                         20880 non-null  int64  \n"," 29  minimum_nights                                20880 non-null  int64  \n"," 30  maximum_nights                                20880 non-null  int64  \n"," 31  minimum_minimum_nights                        20879 non-null  float64\n"," 32  maximum_minimum_nights                        20879 non-null  float64\n"," 33  minimum_maximum_nights                        20879 non-null  float64\n"," 34  maximum_maximum_nights                        20879 non-null  float64\n"," 35  minimum_nights_avg_ntm                        20879 non-null  float64\n"," 36  maximum_nights_avg_ntm                        20879 non-null  float64\n"," 37  has_availability                              20880 non-null  bool   \n"," 38  availability_30                               20880 non-null  int64  \n"," 39  availability_365                              20880 non-null  int64  \n"," 40  number_of_reviews                             20880 non-null  int64  \n"," 41  review_rating                                 20880 non-null  object \n"," 42  review_accuracy                               20880 non-null  object \n"," 43  review_cleanliness                            20880 non-null  object \n"," 44  review_checkin                                20880 non-null  object \n"," 45  review_communication                          20880 non-null  object \n"," 46  review_location                               20880 non-null  object \n"," 47  review_value                                  20880 non-null  object \n"," 48  license                                       20880 non-null  bool   \n"," 49  instant_bookable                              20880 non-null  bool   \n"," 50  calculated_host_listings_count                20880 non-null  int64  \n"," 51  calculated_host_listings_count_entire_homes   20880 non-null  int64  \n"," 52  calculated_host_listings_count_private_rooms  20880 non-null  int64  \n"," 53  calculated_host_listings_count_shared_rooms   20880 non-null  int64  \n"," 54  reviews_per_month                             20880 non-null  object \n","dtypes: bool(6), float64(9), int64(15), object(25)\n","memory usage: 7.9+ MB\n"]}]},{"cell_type":"markdown","source":["## Drop Data"],"metadata":{"id":"hFLq9WFRJbep"}},{"cell_type":"code","source":["data = data.drop(['id', 'host_id'], axis = 1)"],"metadata":{"id":"WjCg6wMBIega","executionInfo":{"status":"ok","timestamp":1653597192794,"user_tz":-600,"elapsed":25,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["## Transform data"],"metadata":{"id":"B_T_odzroTXp"}},{"cell_type":"code","source":["# transform host_since from object to datetime\n","data['host_since'] = pd.to_datetime(data['host_since'], dayfirst = True, format = '%Y/%m/%d', errors = 'coerce')"],"metadata":{"id":"EwyUhmcXoTXv","executionInfo":{"status":"ok","timestamp":1653597192796,"user_tz":-600,"elapsed":25,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# finding mean of response percent\n","total_response_percent = 0\n","count_response_percent = 0\n","for x in data['response_percent']:\n"," if x != 'missing':\n","   total_response_percent += pd.to_numeric(x, downcast = 'float')\n","   count_response_percent += 1\n","\n","avg_response_percent = total_response_percent / count_response_percent\n","avg_response_percent"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SDN9-3U0oYjQ","executionInfo":{"status":"ok","timestamp":1653597193349,"user_tz":-600,"elapsed":576,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"76a57926-7429-4d15-990e-0feac9a39f1c"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["90.46258244545916"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# transform response_percent from object to float\n","# convert missing values to 50\n","\n","data_response_percent = []\n","\n","for x in data['response_percent']:\n","  if x == 'missing':\n","    value = avg_response_percent\n","  else:\n","    value = x\n","  data_response_percent.append(pd.to_numeric(value, downcast = 'float'))\n","data['response_percent'] = data_response_percent"],"metadata":{"id":"QVu2GCOBG1sW","executionInfo":{"status":"ok","timestamp":1653597193351,"user_tz":-600,"elapsed":16,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# finding mean of acceptance percent\n","total_acceptance_percent = 0\n","count_acceptance_percent = 0\n","for x in data['acceptance_percent']:\n"," if x != 'missing':\n","   total_acceptance_percent += pd.to_numeric(x, downcast = 'float')\n","   count_acceptance_percent += 1\n","\n","avg_acceptance_percent = total_acceptance_percent / count_acceptance_percent\n","avg_acceptance_percent"],"metadata":{"id":"NcwDERY6p2zq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653597193837,"user_tz":-600,"elapsed":498,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"de6849a1-e862-4845-b933-f4d28701c318"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["77.55584444946868"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# transform acceptance_percent from object to float\n","# convert missing values to 50\n","\n","data_acceptance_percent = []\n","\n","for x in data['acceptance_percent']:\n","  if x == 'missing':\n","    value = avg_acceptance_percent\n","  else:\n","    value = x\n","  data_acceptance_percent.append(pd.to_numeric(value, downcast = 'float'))\n","data['acceptance_percent'] = data_acceptance_percent"],"metadata":{"id":"SRXkly5fHavD","executionInfo":{"status":"ok","timestamp":1653597194363,"user_tz":-600,"elapsed":531,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# finding mean of reviews per month\n","total_reviews_per_month = 0\n","count_reviews_per_month = 0\n","for x in data['reviews_per_month']:\n"," if x != 'missing':\n","   total_reviews_per_month += pd.to_numeric(x, downcast = 'float')\n","   count_reviews_per_month += 1\n","\n","avg_reviews_per_month = total_reviews_per_month / count_reviews_per_month\n","avg_reviews_per_month"],"metadata":{"id":"jBRtQiqSqMyD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653597195187,"user_tz":-600,"elapsed":831,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"c1b2d2de-1cd0-475f-b641-d73763efd20b"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6415008955105727"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# transform reviews_per_month from object to float\n","\n","data_reviews_per_month = []\n","\n","for x in data['reviews_per_month']:\n","  if x == 'missing':\n","    value = avg_reviews_per_month\n","  else:\n","    value = x\n","  data_reviews_per_month.append(pd.to_numeric(value, downcast = 'float'))\n","data['reviews_per_month'] = data_reviews_per_month"],"metadata":{"id":"3W9HjcWSIrYk","executionInfo":{"status":"ok","timestamp":1653597195690,"user_tz":-600,"elapsed":514,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# mean function\n","def find_mean(variable):\n","  total = 0\n","  count = 0\n","  for x in data[variable]:\n","    if x != 'missing':\n","      total += pd.to_numeric(x, downcast = 'float')\n","      count += 1\n","\n","    avg = total / count\n","    return avg"],"metadata":{"id":"irnPFCt3qbVA","executionInfo":{"status":"ok","timestamp":1653597195692,"user_tz":-600,"elapsed":10,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# transform reviews from object to float\n","review_scores_all = ['review_rating', 'review_accuracy', 'review_cleanliness', 'review_checkin', \n","                     'review_communication', 'review_location' , 'review_value']\n","\n","for review in review_scores_all:\n","  avg = find_mean(review)\n","  data_reviews = []\n","  for x in data[review]:\n","    if x == 'missing':\n","      value = avg\n","    else:\n","      value = x\n","    data_reviews.append(pd.to_numeric(value, downcast = 'float'))\n","  data[review] = data_reviews"],"metadata":{"id":"MmKvE7tqJFWE","executionInfo":{"status":"ok","timestamp":1653597200193,"user_tz":-600,"elapsed":4509,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["# Choose features"],"metadata":{"id":"bo1hBn9CxH3C"}},{"cell_type":"code","source":["data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xxQ8DWuoxGBO","executionInfo":{"status":"ok","timestamp":1653597200195,"user_tz":-600,"elapsed":82,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"bb941136-ca31-4528-e721-46136d5dfb25"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 20880 entries, 0 to 20879\n","Data columns (total 53 columns):\n"," #   Column                                        Non-Null Count  Dtype         \n","---  ------                                        --------------  -----         \n"," 0   name                                          20880 non-null  object        \n"," 1   description                                   20880 non-null  object        \n"," 2   neighbourhood_overview                        20880 non-null  object        \n"," 3   host_name                                     20877 non-null  object        \n"," 4   host_since                                    20877 non-null  datetime64[ns]\n"," 5   host_location                                 20859 non-null  object        \n"," 6   host_about                                    20880 non-null  object        \n"," 7   host_response_time                            20880 non-null  object        \n"," 8   response_percent                              20880 non-null  float64       \n"," 9   acceptance_percent                            20880 non-null  float64       \n"," 10  host_is_superhost                             20880 non-null  bool          \n"," 11  host_neighbourhood                            20880 non-null  object        \n"," 12  listings_count                                20880 non-null  int64         \n"," 13  host_verifications                            20880 non-null  object        \n"," 14  host_has_profile_pic                          20880 non-null  bool          \n"," 15  host_is_verified                              20880 non-null  bool          \n"," 16  neighbourhood                                 20880 non-null  object        \n"," 17  latitude                                      20880 non-null  float64       \n"," 18  longitude                                     20880 non-null  float64       \n"," 19  property_type                                 20880 non-null  object        \n"," 20  room_type                                     20880 non-null  object        \n"," 21  accommodates                                  20880 non-null  int64         \n"," 22  bathrooms_text                                20856 non-null  object        \n"," 23  bedrooms                                      20880 non-null  int64         \n"," 24  beds                                          20880 non-null  float64       \n"," 25  amenities                                     20880 non-null  object        \n"," 26  price                                         20880 non-null  int64         \n"," 27  minimum_nights                                20880 non-null  int64         \n"," 28  maximum_nights                                20880 non-null  int64         \n"," 29  minimum_minimum_nights                        20879 non-null  float64       \n"," 30  maximum_minimum_nights                        20879 non-null  float64       \n"," 31  minimum_maximum_nights                        20879 non-null  float64       \n"," 32  maximum_maximum_nights                        20879 non-null  float64       \n"," 33  minimum_nights_avg_ntm                        20879 non-null  float64       \n"," 34  maximum_nights_avg_ntm                        20879 non-null  float64       \n"," 35  has_availability                              20880 non-null  bool          \n"," 36  availability_30                               20880 non-null  int64         \n"," 37  availability_365                              20880 non-null  int64         \n"," 38  number_of_reviews                             20880 non-null  int64         \n"," 39  review_rating                                 20880 non-null  float64       \n"," 40  review_accuracy                               20880 non-null  float64       \n"," 41  review_cleanliness                            20880 non-null  float64       \n"," 42  review_checkin                                20880 non-null  float64       \n"," 43  review_communication                          20880 non-null  float64       \n"," 44  review_location                               20880 non-null  float64       \n"," 45  review_value                                  20880 non-null  float64       \n"," 46  license                                       20880 non-null  bool          \n"," 47  instant_bookable                              20880 non-null  bool          \n"," 48  calculated_host_listings_count                20880 non-null  int64         \n"," 49  calculated_host_listings_count_entire_homes   20880 non-null  int64         \n"," 50  calculated_host_listings_count_private_rooms  20880 non-null  int64         \n"," 51  calculated_host_listings_count_shared_rooms   20880 non-null  int64         \n"," 52  reviews_per_month                             20880 non-null  float64       \n","dtypes: bool(6), datetime64[ns](1), float64(19), int64(13), object(14)\n","memory usage: 7.6+ MB\n"]}]},{"cell_type":"code","source":["y = data['price']\n","\n","X = data[['bedrooms', 'accommodates', 'beds', 'latitude', 'longitude', 'acceptance_percent', 'review_rating', \n","          'host_has_profile_pic', 'host_is_verified', 'room_type', 'has_availability', 'instant_bookable']]\n","\n","X_dummy = pd.get_dummies(X,drop_first=True)"],"metadata":{"id":"66krhU-6xhM0","executionInfo":{"status":"ok","timestamp":1653597200196,"user_tz":-600,"elapsed":75,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["# Train test split"],"metadata":{"id":"scOQb-1txR5J"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split( X_dummy, y, test_size=0.2, random_state=1)"],"metadata":{"id":"1ls4z-QGxUTU","executionInfo":{"status":"ok","timestamp":1653597200197,"user_tz":-600,"elapsed":74,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["# Multiple Linear Regression"],"metadata":{"id":"KgVdUMWpIJbi"}},{"cell_type":"code","source":["from sklearn import linear_model\n","from sklearn import metrics\n","\n","regr = linear_model.LinearRegression()\n","regr.fit(X_train, y_train)\n"],"metadata":{"id":"RTtUnK96ICQS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653597200942,"user_tz":-600,"elapsed":818,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"dc3d5d8f-939a-400d-bd12-74fff16f58c2"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["y_pred = regr.predict(X_train)\n","print('Multiple Linear Regression')\n","print('MSE: {}'.format(metrics.mean_squared_error(y_train, y_pred)))\n","print('RMSE: {}'.format(np.sqrt(metrics.mean_squared_error(y_train, y_pred))))\n","print('MAE: {}'.format(np.mean(np.abs(y_train - y_pred))))\n","Adj_R2_p1 = (1- metrics.r2_score(y_train, y_pred))\n","Adj_R2_p2 = (len(X_test) - 1) - (len(X_test) - len(X_test.iloc[0]) - 1)\n","print('Adj R2: {}'.format((1 - (Adj_R2_p1*Adj_R2_p2))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QUoKJXY8M5B5","executionInfo":{"status":"ok","timestamp":1653597200944,"user_tz":-600,"elapsed":53,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"94bea608-580a-4a51-88c2-5e6503c31fe8"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Multiple Linear Regression\n","MSE: 207512.7144506157\n","RMSE: 455.53563466606613\n","MAE: 151.0051024355425\n","Adj R2: -9.894428130936301\n"]}]},{"cell_type":"code","source":["y_pred = regr.predict(X_test)\n","print('Multiple Linear Regression')\n","print('MSE: {}'.format(metrics.mean_squared_error(y_test, y_pred)))\n","print('RMSE: {}'.format(np.sqrt(metrics.mean_squared_error(y_test, y_pred))))\n","print('MAE: {}'.format(np.mean(np.abs(y_test - y_pred))))\n","Adj_R2_p1 = (1- metrics.r2_score(y_test, y_pred))\n","Adj_R2_p2 = (len(X_test) - 1) - (len(X_test) - len(X_test.iloc[0]) - 1)\n","print('Adj R2: {}'.format((1 - (Adj_R2_p1*Adj_R2_p2))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3-dBM_BPIM8P","executionInfo":{"status":"ok","timestamp":1653597200946,"user_tz":-600,"elapsed":46,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"3a150109-45ac-4ad7-b9fe-9fbedf11494f"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Multiple Linear Regression\n","MSE: 118279.16053121806\n","RMSE: 343.9173745701401\n","MAE: 143.82352997141027\n","Adj R2: -8.396753863580866\n"]}]},{"cell_type":"code","source":["X_test.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BQmUiRHOFGWH","executionInfo":{"status":"ok","timestamp":1653597307220,"user_tz":-600,"elapsed":321,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"850b941d-8357-48be-b9c8-4b46b9a22b4c"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['bedrooms', 'accommodates', 'beds', 'latitude', 'longitude',\n","       'acceptance_percent', 'review_rating', 'host_has_profile_pic',\n","       'host_is_verified', 'has_availability', 'instant_bookable',\n","       'room_type_Hotel room', 'room_type_Private room',\n","       'room_type_Shared room'],\n","      dtype='object')"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["regr.intercept_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wV6FrVX_E5Iw","executionInfo":{"status":"ok","timestamp":1653597257387,"user_tz":-600,"elapsed":374,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"2ef559d5-e58b-41ff-e035-08333e1d35b8"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-70951.21086430181"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["regr.coef_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DDiwKvXCE2OA","executionInfo":{"status":"ok","timestamp":1653597242403,"user_tz":-600,"elapsed":337,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"173ab399-28b7-4a05-a526-6392197b633d"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1.35640293e+02,  5.33948052e+01, -2.06254869e+01,  5.42819070e+02,\n","        5.90999582e+02, -1.16931333e+00,  5.59866014e-01, -1.06675343e+02,\n","        1.85921820e+01,  3.08269577e+01, -2.13096242e+01,  1.14504178e+02,\n","        3.67724713e+01,  4.63649248e+01])"]},"metadata":{},"execution_count":27}]},{"cell_type":"markdown","source":["**Recursive Feature Elimination**"],"metadata":{"id":"YEcB_8FIOm35"}},{"cell_type":"code","source":["# Y_train = y_train\n","# X_train = X_train[num_var.columns]"],"metadata":{"id":"V4FEbqaIOup1","executionInfo":{"status":"ok","timestamp":1653597200947,"user_tz":-600,"elapsed":36,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["from sklearn.feature_selection import RFE\n","from sklearn.feature_selection import RFECV\n","from sklearn.linear_model import LinearRegression"],"metadata":{"id":"Q5ciBzufSGb1","executionInfo":{"status":"ok","timestamp":1653597200949,"user_tz":-600,"elapsed":36,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["X_train_rfe = X_train[['bedrooms', 'accommodates', 'beds', 'latitude', 'longitude', 'acceptance_percent', 'review_rating']]\n","y_train_rfe = y_train\n","names_rfe=pd.DataFrame(['bedrooms', 'accommodates', 'beds', 'latitude', 'longitude', 'acceptance_percent', 'review_rating'])"],"metadata":{"id":"QrX7v9kHSEPO","executionInfo":{"status":"ok","timestamp":1653597200952,"user_tz":-600,"elapsed":38,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["#use linear regression as the model\n","lin_reg = LinearRegression()\n","\n","#This is to select 5 variables: can be changed and checked in model for accuracy\n","# rfe_mod = RFECV(lin_reg, step=1, cv = 5) \n","rfe_mod = RFE(lin_reg, n_features_to_select = 5, step=1) \n","rfe_values=rfe_mod.fit(X_train_rfe,y_train_rfe) #to fit\n","rfe_values.support_#The mask of selected features.\n","rfe_values.ranking_ #The feature ranking, such that ranking_[i] corresponds to the ranking position of the i-th feature. Selected (i.e., estimated best) features are assigned rank 1.\n","\n","rankings=pd.DataFrame(rfe_values.ranking_) #Make it into data frame\n","# rankings"],"metadata":{"id":"Sxm-NGBdOzCV","executionInfo":{"status":"ok","timestamp":1653597200955,"user_tz":-600,"elapsed":39,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["#Concat and name columns\n","ranked=pd.concat([names_rfe,rankings], axis=1)\n","ranked.columns = [\"Feature\", \"Rank\"]\n","ranked\n","\n","#Select most important (Only 1's)\n","most_important = ranked.loc[ranked['Rank']==1] \n","print(most_important)\n","\n","most_important['Rank'].count()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-r8arkbxO0mm","executionInfo":{"status":"ok","timestamp":1653597200958,"user_tz":-600,"elapsed":41,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"35c53f0b-bb39-4da2-f7c3-70fcad6f77ed"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["        Feature  Rank\n","0      bedrooms     1\n","1  accommodates     1\n","2          beds     1\n","3      latitude     1\n","4     longitude     1\n"]},{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["# Ridge Regression"],"metadata":{"id":"VdeJUWIhRFTU"}},{"cell_type":"code","source":["from sklearn.linear_model import Ridge\n","import numpy as np\n","\n","#hyperparameter\n","a = 1.0 #insert alpha\n","\n","#modeling\n","clf = Ridge(alpha=a)\n","clf.fit(X_train, y_train)"],"metadata":{"id":"9sOde75cRH01","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653597998743,"user_tz":-600,"elapsed":18,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"2d5411f3-05b5-4e30-8e80-b9ffeb546773"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Ridge()"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# grid search hyperparameters for ridge regression\n","from numpy import arange\n","from pandas import read_csv\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import RepeatedKFold\n","from sklearn.linear_model import Ridge\n","#the dataset\n","X, y = X_train, y_train\n","\n","# define model\n","model = Ridge()\n","\n","# define model evaluation method\n","cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\n","\n","# define grid\n","grid = dict()\n","grid['alpha'] = arange(0, 1, 0.01)\n","\n","# define search\n","search = GridSearchCV(model, grid, scoring='neg_mean_absolute_error', cv=cv, n_jobs=-1)\n","\n","# perform the search\n","results = search.fit(X, y)\n","\n","# summarize\n","print('MAE: %.3f' % results.best_score_)\n","print('Config: %s' % results.best_params_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":381},"id":"wxQeSen0TKNq","executionInfo":{"status":"error","timestamp":1653576799242,"user_tz":-600,"elapsed":36902,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"48a8dd74-4b02-40e7-c5e8-2c31de8c1a63"},"execution_count":29,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-d5959e8a245e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;31m# perform the search\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msearch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;31m# summarize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    889\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 891\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    892\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1390\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1392\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1393\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    849\u001b[0m                     )\n\u001b[1;32m    850\u001b[0m                     for (cand_idx, parameters), (split_idx, (train, test)) in product(\n\u001b[0;32m--> 851\u001b[0;31m                         \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcandidate_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    852\u001b[0m                     )\n\u001b[1;32m    853\u001b[0m                 )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1054\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1055\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1056\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1057\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1058\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    933\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    934\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 935\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    936\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    937\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    540\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    541\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 542\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    543\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mCfTimeoutError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    428\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 430\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_condition\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    431\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mCANCELLED\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCANCELLED_AND_NOTIFIED\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    294\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["#hyperparameter\n","a = 0.99 #insert alpha\n","\n","#modeling\n","clf = Ridge(alpha=a)\n","clf.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c0zPIZwgXDOo","executionInfo":{"status":"ok","timestamp":1653598002819,"user_tz":-600,"elapsed":364,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"733faa18-411d-4244-d134-9c733a637595"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Ridge(alpha=0.99)"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["y_pred = clf.predict(X_train)\n","print('Ridge Regression')\n","print('MSE: {}'.format(metrics.mean_squared_error(y_train, y_pred)))\n","print('RMSE: {}'.format(np.sqrt(metrics.mean_squared_error(y_train, y_pred))))\n","print('MAE: {}'.format(np.mean(np.abs(y_train - y_pred))))\n","Adj_R2_p1 = (1- metrics.r2_score(y_train, y_pred))\n","Adj_R2_p2 = (len(X_test) - 1) - (len(X_test) - len(X_test.iloc[0]) - 1)\n","print('Adj R2: {}'.format((1 - (Adj_R2_p1*Adj_R2_p2))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BoPnS9nzOUBu","executionInfo":{"status":"ok","timestamp":1653576804033,"user_tz":-600,"elapsed":9,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"3a9bf676-9991-4a90-e473-f30269fba3b2"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Ridge Regression\n","MSE: 207513.02541255613\n","RMSE: 455.53597598055427\n","MAE: 150.9088826517252\n","Adj R2: -9.894444456454092\n"]}]},{"cell_type":"code","source":["y_pred = clf.predict(X_test)\n","print('Ridge Regression')\n","print('MSE: {}'.format(metrics.mean_squared_error(y_test, y_pred)))\n","print('RMSE: {}'.format(np.sqrt(metrics.mean_squared_error(y_test, y_pred))))\n","print('MAE: {}'.format(np.mean(np.abs(y_test - y_pred))))\n","Adj_R2_p1 = (1- metrics.r2_score(y_test, y_pred))\n","Adj_R2_p2 = (len(X_test) - 1) - (len(X_test) - len(X_test.iloc[0]) - 1)\n","print('Adj R2: {}'.format((1 - (Adj_R2_p1*Adj_R2_p2))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IIlH8kg-OYRo","executionInfo":{"status":"ok","timestamp":1653598009457,"user_tz":-600,"elapsed":2617,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"e9c9468b-1991-4309-e9d5-3766f33b4b34"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Ridge Regression\n","MSE: 118268.64628877478\n","RMSE: 343.9020882297384\n","MAE: 143.7260358690468\n","Adj R2: -8.395918553726975\n"]}]},{"cell_type":"code","source":["X_test.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x3hEnluT2_jY","executionInfo":{"status":"ok","timestamp":1653598011226,"user_tz":-600,"elapsed":8,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"148fc5eb-b415-4763-e0d8-c351d902ad1f"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['bedrooms', 'accommodates', 'beds', 'latitude', 'longitude',\n","       'acceptance_percent', 'review_rating', 'host_has_profile_pic',\n","       'host_is_verified', 'has_availability', 'instant_bookable',\n","       'room_type_Hotel room', 'room_type_Private room',\n","       'room_type_Shared room'],\n","      dtype='object')"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["clf.intercept_"],"metadata":{"id":"yeiZ8oFeH0aM","executionInfo":{"status":"ok","timestamp":1653598019940,"user_tz":-600,"elapsed":329,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"f488aae1-9ec0-435a-83da-f7c663d6c47b","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-70528.75710658789"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["clf.coef_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lAkKFh2g2L7a","executionInfo":{"status":"ok","timestamp":1653598020245,"user_tz":-600,"elapsed":8,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"872952e9-9616-495f-eddd-9ce8834bd94b"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1.35692444e+02,  5.33799793e+01, -2.05995303e+01,  5.37854805e+02,\n","        5.87086404e+02, -1.17059562e+00,  5.77837241e-01, -1.05419846e+02,\n","        1.86192726e+01,  3.07123228e+01, -2.13381410e+01,  1.13411114e+02,\n","        3.65296043e+01,  4.59841190e+01])"]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["# Decision Tree"],"metadata":{"id":"rAc1P4mDy66t"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeRegressor\n","from sklearn.model_selection import cross_val_score\n","from sklearn import metrics"],"metadata":{"id":"nQexPXCRzV7s","executionInfo":{"status":"ok","timestamp":1653566516609,"user_tz":-600,"elapsed":499,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["decision_tree_depth = []\n","def decision_tree(X_train, X_test, y_train, y_test, depth):\n","    decision_tree_reg = DecisionTreeRegressor(max_depth = depth, random_state=1)\n","    decision_tree_reg.fit(X_train, y_train)\n","    y_pred = decision_tree_reg.predict(X_test)\n","\n","    \n","    print('Decision Tree at depth {}'.format(depth))\n","    print('MSE: {}'.format(metrics.mean_squared_error(y_test, y_pred)))\n","    print('RMSE: {}'.format(np.sqrt(metrics.mean_squared_error(y_test, y_pred))))\n","    print('MAE: {}'.format(np.mean(np.abs(y_test - y_pred))))\n","    Adj_R2_p1 = (1- metrics.r2_score(y_test, y_pred))\n","    Adj_R2_p2 = (len(X_test) - 1) - (len(X_test) - len(X_test.iloc[0]) - 1)\n","    print('Adj R2: {}'.format((1 - (Adj_R2_p1*Adj_R2_p2))))\n","\n","    dt_metrics = []\n","    dt_metrics.append(depth)\n","    dt_metrics.append(metrics.mean_squared_error(y_test, y_pred))\n","    dt_metrics.append(np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n","    dt_metrics.append(np.mean(np.abs(y_test - y_pred)))\n","    dt_metrics.append((1 - (Adj_R2_p1*Adj_R2_p2)))\n","    decision_tree_depth.append(dt_metrics)\n","\n","    print('')\n","    print('-----------------------------------------')\n","    print('')\n"],"metadata":{"id":"BXmIcScQy3og"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(1, 20):\n","  decision_tree(X_train, X_test, y_train, y_test, i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pnWqNQWR0LoF","executionInfo":{"status":"ok","timestamp":1653548232271,"user_tz":-600,"elapsed":2661,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"65f4a5bb-2367-4bec-972c-6ca5339823ab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree at depth 1\n","MSE: 134094.24286448903\n","RMSE: 366.18880767233867\n","MAE: 161.58171457779824\n","Adj R2: -9.653191898400955\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 2\n","MSE: 122937.91630591438\n","RMSE: 350.6250366216229\n","MAE: 144.7252521583506\n","Adj R2: -8.766871313930903\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 3\n","MSE: 113454.28502316981\n","RMSE: 336.8297567365001\n","MAE: 133.13905213628328\n","Adj R2: -8.013438938382501\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 4\n","MSE: 104107.96847889079\n","RMSE: 322.65766452835237\n","MAE: 122.5664588469157\n","Adj R2: -7.270915608801348\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 5\n","MSE: 122166.3761422873\n","RMSE: 349.5230695423226\n","MAE: 122.33064806156324\n","Adj R2: -8.705575875403023\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 6\n","MSE: 171966.24120011154\n","RMSE: 414.68812522196913\n","MAE: 123.13627367107499\n","Adj R2: -12.661953924471145\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 7\n","MSE: 170089.19647187376\n","RMSE: 412.41871498741875\n","MAE: 120.98302665968825\n","Adj R2: -12.512831059353015\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 8\n","MSE: 201989.5711081079\n","RMSE: 449.4324989451785\n","MAE: 129.26529296107373\n","Adj R2: -15.047174110710678\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 9\n","MSE: 235299.53731110648\n","RMSE: 485.07683650232826\n","MAE: 130.54619788995427\n","Adj R2: -17.6935029501106\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 10\n","MSE: 249259.27222742894\n","RMSE: 499.258722735446\n","MAE: 130.70500630177258\n","Adj R2: -18.802541874806852\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 11\n","MSE: 288296.1796890182\n","RMSE: 536.9321928223509\n","MAE: 138.64672744430536\n","Adj R2: -21.903850755969568\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 12\n","MSE: 452386.94381367374\n","RMSE: 672.5971631026061\n","MAE: 137.6169096872532\n","Adj R2: -34.9401330126341\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 13\n","MSE: 450027.6338815058\n","RMSE: 670.8409900129134\n","MAE: 139.41292814922852\n","Adj R2: -34.752696319467574\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 14\n","MSE: 450190.0522138265\n","RMSE: 670.9620348528123\n","MAE: 137.67906327714343\n","Adj R2: -34.765599734446994\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 15\n","MSE: 477889.5392101231\n","RMSE: 691.2955512732041\n","MAE: 146.14731340976186\n","Adj R2: -36.966200924738324\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 16\n","MSE: 459627.6222630873\n","RMSE: 677.958422222991\n","MAE: 142.52744017566195\n","Adj R2: -35.51537274961647\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 17\n","MSE: 459063.6974462496\n","RMSE: 677.5423953128318\n","MAE: 144.50323113557664\n","Adj R2: -35.470571428085364\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 18\n","MSE: 476345.85474793345\n","RMSE: 690.1781326207991\n","MAE: 149.10247740834575\n","Adj R2: -36.84356205184573\n","\n","-----------------------------------------\n","\n","Decision Tree at depth 19\n","MSE: 496928.928573862\n","RMSE: 704.9318609439227\n","MAE: 154.05863447191706\n","Adj R2: -38.47879582954164\n","\n","-----------------------------------------\n","\n"]}]},{"cell_type":"code","source":["dt_depth = []\n","dt_MSE = []\n","dt_RMSE = []\n","dt_MAE = []\n","dt_adj_r2 = []\n","for x in decision_tree_depth:\n","  dt_depth.append(x[0])\n","  dt_MSE.append(x[1])\n","  dt_RMSE.append(x[2])\n","  dt_MAE.append(x[3])\n","  dt_adj_r2.append(x[4])"],"metadata":{"id":"AgxsJ3joJ1nY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.title('Tree depth and Adjusted R^2')\n","plt.xlabel('Tree depth')\n","plt.ylabel('Adjusted R^2')\n","sns.scatterplot(dt_depth, dt_adj_r2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":427},"id":"g3TffUwcKefe","executionInfo":{"status":"ok","timestamp":1653548541047,"user_tz":-600,"elapsed":876,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"0db5df9c-7a43-41d5-bb26-41e0176edcf4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f5720c22550>"]},"metadata":{},"execution_count":39},{"output_type":"display_data","data":{"text/plain":["<Figure size 648x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.title('Tree depth and MSE')\n","plt.xlabel('Tree depth')\n","plt.ylabel('MSE')\n","sns.scatterplot(dt_depth, dt_MSE)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":427},"id":"kJjD4CdnNzlc","executionInfo":{"status":"ok","timestamp":1653549286338,"user_tz":-600,"elapsed":547,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"d3b42a8b-df84-4343-c73f-f24ae82627fe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f57202fa450>"]},"metadata":{},"execution_count":46},{"output_type":"display_data","data":{"text/plain":["<Figure size 648x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.title('Tree depth and RMSE')\n","plt.xlabel('Tree depth')\n","plt.ylabel('RMSE')\n","sns.scatterplot(dt_depth, dt_RMSE)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":427},"id":"X9vyDaYyN0R4","executionInfo":{"status":"ok","timestamp":1653549308528,"user_tz":-600,"elapsed":990,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"0dc58ce3-5f66-4193-bc6c-d346d1da6a51"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f57202a4a10>"]},"metadata":{},"execution_count":47},{"output_type":"display_data","data":{"text/plain":["<Figure size 648x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.title('Tree depth and MAE')\n","plt.xlabel('Tree depth')\n","plt.ylabel('MAE')\n","sns.scatterplot(dt_depth, dt_MAE)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":427},"id":"86LoTDBfN2RX","executionInfo":{"status":"ok","timestamp":1653549325650,"user_tz":-600,"elapsed":970,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"a6d9d883-fc76-49bd-f307-9040fae2ecab"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f57202b4f50>"]},"metadata":{},"execution_count":48},{"output_type":"display_data","data":{"text/plain":["<Figure size 648x432 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["decision_tree_reg = DecisionTreeRegressor(max_depth = 4, random_state=1)\n","decision_tree_reg.fit(X_train, y_train)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OUrMyZeFPPbb","executionInfo":{"status":"ok","timestamp":1653566525732,"user_tz":-600,"elapsed":411,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"2701efa4-efd5-4e61-8b72-12dc6ce4dc98"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeRegressor(max_depth=4, random_state=1)"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["y_pred = decision_tree_reg.predict(X_train)\n","print('Decision Tree')\n","print('MSE: {}'.format(metrics.mean_squared_error(y_train, y_pred)))\n","print('RMSE: {}'.format(np.sqrt(metrics.mean_squared_error(y_train, y_pred))))\n","print('MAE: {}'.format(np.mean(np.abs(y_train - y_pred))))\n","Adj_R2_p1 = (1- metrics.r2_score(y_train, y_pred))\n","Adj_R2_p2 = (len(X_test) - 1) - (len(X_test) - len(X_test.iloc[0]) - 1)\n","print('Adj R2: {}'.format((1 - (Adj_R2_p1*Adj_R2_p2))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qfe-GddUPgli","executionInfo":{"status":"ok","timestamp":1653566619456,"user_tz":-600,"elapsed":492,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"68eaba50-8ab1-4806-eb30-8d467f87f381"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree\n","MSE: 193166.86943743934\n","RMSE: 439.5075305810349\n","MAE: 128.03543945757482\n","Adj R2: -9.141270533401261\n"]}]},{"cell_type":"code","source":["y_pred = decision_tree_reg.predict(X_test)\n","print('Decision Tree at depth {}'.format(4))\n","print('MSE: {}'.format(metrics.mean_squared_error(y_test, y_pred)))\n","print('RMSE: {}'.format(np.sqrt(metrics.mean_squared_error(y_test, y_pred))))\n","print('MAE: {}'.format(np.mean(np.abs(y_test - y_pred))))\n","Adj_R2_p1 = (1- metrics.r2_score(y_test, y_pred))\n","Adj_R2_p2 = (len(X_test) - 1) - (len(X_test) - len(X_test.iloc[0]) - 1)\n","print('Adj R2: {}'.format((1 - (Adj_R2_p1*Adj_R2_p2))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aUrs4e7lPXgU","executionInfo":{"status":"ok","timestamp":1653566619926,"user_tz":-600,"elapsed":6,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"44c7cc3c-1d41-4fb7-8889-0dc413d499a6"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree at depth 4\n","MSE: 104107.96847889079\n","RMSE: 322.65766452835237\n","MAE: 122.5664588469157\n","Adj R2: -7.270915608801348\n"]}]},{"cell_type":"markdown","source":["# Random Forest"],"metadata":{"id":"UxK-P1dV3Ecl"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestRegressor"],"metadata":{"id":"BStcFEQJ0P0l","executionInfo":{"status":"ok","timestamp":1653568739977,"user_tz":-600,"elapsed":388,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["random_forest_reg = RandomForestRegressor(max_depth = 10, random_state=1)\n","random_forest_reg.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nuN4_Wnn3Xkc","executionInfo":{"status":"ok","timestamp":1653568745697,"user_tz":-600,"elapsed":3985,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"6a2d2cb5-08e1-4eb8-a080-1afaad4928ac"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(max_depth=10, random_state=1)"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["y_pred = random_forest_reg.predict(X_train)\n","print('Random Forest')\n","print('MSE: {}'.format(metrics.mean_squared_error(y_train, y_pred)))\n","print('RMSE: {}'.format(np.sqrt(metrics.mean_squared_error(y_train, y_pred))))\n","print('MAE: {}'.format(np.mean(np.abs(y_train - y_pred))))\n","Adj_R2_p1 = (1- metrics.r2_score(y_train, y_pred))\n","Adj_R2_p2 = (len(X_test) - 1) - (len(X_test) - len(X_test.iloc[0]) - 1)\n","print('Adj R2: {}'.format((1 - (Adj_R2_p1*Adj_R2_p2))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sb7lsmdVQX27","executionInfo":{"status":"ok","timestamp":1653568745699,"user_tz":-600,"elapsed":21,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"b68ad3b3-eb7d-45c9-896f-b01ad2c9ae23"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest\n","MSE: 68035.1383836544\n","RMSE: 260.83546228159696\n","MAE: 90.76610620646566\n","Adj R2: -2.5718482477632567\n"]}]},{"cell_type":"code","source":["y_pred = random_forest_reg.predict(X_test)\n","print('Random Forest at depth {}'.format(10))\n","print('MSE: {}'.format(metrics.mean_squared_error(y_test, y_pred)))\n","print('RMSE: {}'.format(np.sqrt(metrics.mean_squared_error(y_test, y_pred))))\n","print('MAE: {}'.format(np.mean(np.abs(y_test - y_pred))))\n","Adj_R2_p1 = (1- metrics.r2_score(y_test, y_pred))\n","Adj_R2_p2 = (len(X_test) - 1) - (len(X_test) - len(X_test.iloc[0]) - 1)\n","print('Adj R2: {}'.format((1 - (Adj_R2_p1*Adj_R2_p2))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wJKRC_eDQVYv","executionInfo":{"status":"ok","timestamp":1653568748619,"user_tz":-600,"elapsed":449,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"1fa8cf9f-f120-4bcf-e884-b68d24dde988"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest at depth 10\n","MSE: 93828.32413175657\n","RMSE: 306.31409391628813\n","MAE: 110.99556812320468\n","Adj R2: -6.454243531477332\n"]}]},{"cell_type":"markdown","source":["# Optimised Forest"],"metadata":{"id":"AUvd-ZlN35yR"}},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","import time"],"metadata":{"id":"iDXcP2lE37SV","executionInfo":{"status":"ok","timestamp":1653566793987,"user_tz":-600,"elapsed":420,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["# Define the parameter grid\n","param_grid = {'n_estimators': np.arange(1,100,10),\n","              'max_depth': np.arange(1,10,1),\n","             'max_features': [\"auto\", \"sqrt\"]}\n","param_grid"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lA71own84Ewm","executionInfo":{"status":"ok","timestamp":1653566795964,"user_tz":-600,"elapsed":12,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"57aa4950-582e-4fda-a95a-1bcc75280c7a"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'max_depth': array([1, 2, 3, 4, 5, 6, 7, 8, 9]),\n"," 'max_features': ['auto', 'sqrt'],\n"," 'n_estimators': array([ 1, 11, 21, 31, 41, 51, 61, 71, 81, 91])}"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["X_tune, X_fit, y_tune, y_fit = train_test_split( X_train, y_train, test_size=0.5, random_state=1)"],"metadata":{"id":"6qLmo5jN6dOF","executionInfo":{"status":"ok","timestamp":1653566805388,"user_tz":-600,"elapsed":418,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["# Conduct grid search\n","base_optimised_forest_reg= RandomForestRegressor(random_state=1)\n","optimised_forest_reg_cv = GridSearchCV(base_optimised_forest_reg, param_grid)\n","\n","print(\"Running....\")\n","tic = time.time()\n","optimised_forest_reg_cv.fit(X_tune, y_tune)\n","\n","toc = time.time()\n","print(\"Training time: {0:.4f}s\".format(toc - tic))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L7Lbqmx74VYn","executionInfo":{"status":"ok","timestamp":1653567065178,"user_tz":-600,"elapsed":257836,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"7b89e1f9-3874-4be4-a4ea-22179cc66ef4"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Running....\n","Training time: 258.1349s\n"]}]},{"cell_type":"code","source":["optimised_forest_reg_cv.best_estimator_\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"90GoobpK4vNV","executionInfo":{"status":"ok","timestamp":1653567065180,"user_tz":-600,"elapsed":30,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"1a3447ae-426a-43e9-915e-321d56afb0df"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(max_depth=8, max_features='sqrt', n_estimators=91,\n","                      random_state=1)"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["optimised_forest_reg = RandomForestRegressor(max_depth = 8, max_features = 'sqrt', n_estimators = 91, random_state=1)\n","optimised_forest_reg.fit(X_train, y_train)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gooGD9U-4l7F","executionInfo":{"status":"ok","timestamp":1653567113641,"user_tz":-600,"elapsed":1644,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"5ac0c2b2-2f9d-44fe-8b5b-db71ed021fc9"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(max_depth=8, max_features='sqrt', n_estimators=91,\n","                      random_state=1)"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["y_pred = optimised_forest_reg.predict(X_train)\n","print('Optimised Forest')\n","print('MSE: {}'.format(metrics.mean_squared_error(y_train, y_pred)))\n","print('RMSE: {}'.format(np.sqrt(metrics.mean_squared_error(y_train, y_pred))))\n","print('MAE: {}'.format(np.mean(np.abs(y_train - y_pred))))\n","Adj_R2_p1 = (1- metrics.r2_score(y_train, y_pred))\n","Adj_R2_p2 = (len(X_test) - 1) - (len(X_test) - len(X_test.iloc[0]) - 1)\n","print('Adj R2: {}'.format((1 - (Adj_R2_p1*Adj_R2_p2))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AvNY6JbcR8x7","executionInfo":{"status":"ok","timestamp":1653567137999,"user_tz":-600,"elapsed":411,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"7a075870-8a90-4d62-b73a-db67ac9805d8"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimised Forest\n","MSE: 147407.36122989288\n","RMSE: 383.9366630446914\n","MAE: 110.3025036830258\n","Adj R2: -6.738894010141313\n"]}]},{"cell_type":"code","source":["y_pred = optimised_forest_reg.predict(X_test)\n","\n","print('Optimised forest:')\n","print('MSE: {}'.format(metrics.mean_squared_error(y_test, y_pred)))\n","print('RMSE: {}'.format(np.sqrt(metrics.mean_squared_error(y_test, y_pred))))\n","print('MAE: {}'.format(np.mean(np.abs(y_test - y_pred))))\n","Adj_R2_p1 = (1- metrics.r2_score(y_test, y_pred))\n","Adj_R2_p2 = (len(X_test) - 1) - (len(X_test) - len(X_test.iloc[0]) - 1)\n","print('Adj R2: {}'.format((1 - (Adj_R2_p1*Adj_R2_p2))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RzMDG00hQ2Fy","executionInfo":{"status":"ok","timestamp":1653567140123,"user_tz":-600,"elapsed":402,"user":{"displayName":"Larissa Yang","userId":"10043563451990647461"}},"outputId":"f8d510a6-72a8-451d-e560-d40bd930e003"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimised forest:\n","MSE: 87257.30931581494\n","RMSE: 295.393482182351\n","MAE: 110.90412149025694\n","Adj R2: -5.932205595275971\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"NzZ_XmkxSCvo"},"execution_count":null,"outputs":[]}]}